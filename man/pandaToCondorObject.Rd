% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pandaToCondorObject.R
\name{pandaToCondorObject}
\alias{pandaToCondorObject}
\title{Turn PANDA network into a CONDOR object}
\usage{
pandaToCondorObject(panda.net, threshold)
}
\arguments{
\item{panda.net}{Data Frame indicating the result of PANDA regulatory network, created by \code{\link{pandaPy}}}

\item{threshold}{Numeric vector of the customered threshold to select edges. Default value is the the midpoint between 
the median edge-weight of prior ( 3rd column "Motif" is 1.0) edges 
and the median edge-weight of non-prior edges (3rd column "Motif" is 0.0) in PANDA network.
and the median edge-weight of non-prior edges (3rd column "Motif" is 0.0) in PANDA network.}
}
\value{
a CONDOR object, see \code{\link{createCondorObject}}.
}
\description{
\strong{CONDOR} (COmplex Network Description Of Regulators) implements methods for clustering biapartite networks
and estimatiing the contribution of each node to its community's modularity, 
\href{http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005033}{[(Platig et al. 2016)])}
This function uses the result of PANDA algorithm as the input dataset to run CONDOR algorithm. More about \href{https://github.com/jplatig/condor}{condor} package and usage.
}
\examples{

# refer to three input datasets files in inst/extdat
treated_expression_file_path <- system.file("extdata", "expr4_matched.txt", 
package = "netZooR", mustWork = TRUE)
motif_file_path <- system.file("extdata", "chip_matched.txt", package = "netZooR", mustWork = TRUE)
ppi_file_path <- system.file("extdata", "ppi_matched.txt", package = "netZooR", mustWork = TRUE)


# Run PANDA to construct the treated network
treated_all_panda_result <- pandaPy(expr_file = treated_expression_file_path, 
motif_file= motif_file_path, ppi_file = ppi_file_path, 
modeProcess="legacy", remove_missing = TRUE )

# access PANDA regulatory network
treated_net <- treated_all_panda_result$panda

# Obtain the condor.object from PANDA network
treated_condor_object <- pandaToCondorObject(treated_net, threshold = 0)

# cluster condor.object
treated_condor_object <- condorCluster(treated_condor_object, project = FALSE)

# package igraph and package viridisLite are already loaded with this package.
library(viridisLite)
treated_color_num <- max(treated_condor_object$red.memb$com)
treated_color <- viridis(treated_color_num, alpha = 1, begin = 0, end = 1, 
direction = 1, option = "D")
condorPlotCommunities(treated_condor_object, color_list=treated_color, 
point.size=0.04, xlab="Target", ylab="Regulator")


}
